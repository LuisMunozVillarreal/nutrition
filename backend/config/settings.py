"""Django settings for nutrition project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from warnings import filterwarnings

# TODO: Remove this when the stubs are available - pylint: disable=fixme
import environ  # type: ignore
from google.oauth2 import service_account

ENV = environ.Env()

NUTRITION = "nutrition"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = ENV("SECRET_KEY")

DEBUG = ENV("DEBUG", default=False)

ALLOWED_HOSTS = ENV("ALLOWED_HOSTS", default=[])
ALLOWED_CIDR_NETS = ["10.0.0.0/8"]

SITE_ID = 1

ENVIRONMENT = ENV("ENVIRONMENT", default="development")
if ENVIRONMENT == "development":  # pragma: no cover
    ALLOWED_HOSTS = ["192.168.1.101", "localhost"]
    DEBUG = True


# Application definition

INSTALLED_APPS = [
    "apps.exercises",
    "apps.foods",
    "apps.goals",
    "apps.measurements",
    "apps.plans",
    "apps.users",
    "dbbackup",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "nested_admin",
    "taggit",
]

MIDDLEWARE = [
    "allow_cidr.middleware.AllowCIDRMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
POSTGRESQL_DB = NUTRITION
POSTGRESQL_USER = NUTRITION
POSTGRESQL_PASSWORD = ENV("POSTGRESQL_PASSWORD", default="")
POSTGRESQL_HOST = ENV("BACKEND_POSTGRESQL_SERVICE_HOST", default="localhost")
DB_CONFIG = ENV.db(
    default=(
        f"postgres://{POSTGRESQL_USER}:{POSTGRESQL_PASSWORD}@"
        f"{POSTGRESQL_HOST}:5432/{POSTGRESQL_DB}"
    )
)

DATABASES = {
    "default": DB_CONFIG,
}


# Password
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.MinimumLengthValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.CommonPasswordValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.NumericPasswordValidator"
        ),
    },
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.ScryptPasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-gb"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = f"{BASE_DIR}/public/static/"


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "users.User"


# Calories per gram
PROTEIN_KCAL_GRAM = 4
FAT_KCAL_GRAM = 9
CARB_KCAL_GRAM = 4
KCAL_KG = 7700


# https://adamj.eu/tech/2023/12/07/django-fix-urlfield-assume-scheme-warnings/
filterwarnings(
    "ignore",
    "The FORMS_URLFIELD_ASSUME_HTTPS transitional setting is deprecated.",
)
FORMS_URLFIELD_ASSUME_HTTPS = True


# GS Credentials
GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
    "nutrition-gcp-db-backup-credentials.json"
)


# DB Backup
DBBACKUP_FILENAME_TEMPLATE = (
    f"nutrition-{ENVIRONMENT}-db-backup-{{datetime}}.{{extension}}"
)
DBBACKUP_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
DBBACKUP_STORAGE_OPTIONS = {
    "bucket_name": "nutrition-db-backups",
    "project_id": "nutrition",
    "blob_chunk_size": 1024 * 1024,
    "default_acl": None,
}
DBBACKUP_CONNECTORS = {
    "default": {
        "RESTORE_SUFFIX": "--if-exists",
    },
}


# Default Storage
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
        "OPTIONS": {
            "bucket_name": "nutrition-pictures",
            "project_id": "nutrition",
            "querystring_auth": True,
        },
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}


# Gemini
GEMINI_API_KEY = ENV("GEMINI_API_KEY")


# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "named": {
            "format": (
                "Django       - {levelname} {asctime} {module} {process:d} "
                "{thread:d} {message}"
            ),
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "named",
        },
    },
    "root": {
        "handlers": ["console"],
        "propagate": True,
    },
}
