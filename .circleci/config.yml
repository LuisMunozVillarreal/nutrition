version: 2.1

parameters:
  backend-image:
    type: string
    default: "luismunozvillarreal/nutrition-backend:0.1.0_build-a19cbc2-1715436133"
  poetry-venv:
    type: string
    default: "/home/backend/project/backend/.venv/"

executors:
  api:
    docker:
      - image: << pipeline.parameters.backend-image >>
    environment:
      PATH: "/usr/local/bin:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.local/bin"

  python-postgresql:
    docker:
      - image: << pipeline.parameters.backend-image >>
      - image: cimg/postgres:16.2
        environment:
          POSTGRES_USER: nutrition

  webapp:
    docker:
      - image: "node:lts-alpine3.17"


commands:
  python-dependencies:
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          name: Restore API Dependencies
          keys:
            - python-packages-{{ checksum "poetry.lock" }}-v3
      - run:
          name: Install API Dependencies
          command: poetry install --no-ansi
      - save_cache:
          name: Save Python Dependencies
          key: python-packages-{{ checksum "poetry.lock" }}-v3
          paths:
            - << pipeline.parameters.poetry-venv >>

  gcp-credentials:
    steps:
      - run:
          name: Create GCP credential JSON
          command: echo $GCLOUD_SERVICE_KEY > nutrition-gcp-db-backup-credentials.json

  validate-backend:
    parameters:
      env:
        type: string
    steps:
      - restore_cache:
          name: Restore Tox Dependencies
          keys:
            - tox-<< parameters.env >>-{{ checksum "poetry.lock" }}-v1
      - run:
          name: << parameters.env >>
          command: poetry run tox -e << parameters.env >>
      - save_cache:
          name: Save Tox Dependencies
          key: tox-<< parameters.env >>-{{ checksum "poetry.lock" }}-v1
          paths:
            - .tox/<< parameters.env >>/lib


  validate-webapp:
    parameters:
      env:
        type: string
    steps:
      - checkout:
          path: ~/project

      # Webapp dependencies
      - restore_cache:
          name: Restore Webapp dependencies
          keys:
            - webapp-packages-{{ checksum "yarn.lock" }}-v1
      - run:
          name: Install Webapp dependencies
          command: yarn install
      - save_cache:
          name: Save Webapp Dependencies
          key: webapp-packages-{{ checksum "yarn.lock" }}-v1
          paths:
            - node_modules

      # Run chekcers
      - run:
          name: << parameters.env >>
          command: yarn << parameters.env >>

jobs:
  backend-pytest:
    working_directory: ~/project/backend
    executor: python-postgresql
    steps:
      - python-dependencies
      - gcp-credentials
      - validate:
          env: pytest
  backend-bandit:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - validate:
          env: bandit
  backend-flake8:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - validate:
          env: flake8
  backend-black:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - validate:
          env: black
  backend-mypy:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - gcp-credentials
      - validate:
          env: mypy
  backend-pylint:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - gcp-credentials
      - validate:
          env: pylint
  backend-pylint-tests:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - gcp-credentials
      - validate:
          env: pylint-tests
  backend-pydocstyle:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - validate:
          env: pydocstyle
  backend-pydocstyle-tests:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - validate:
          env: pydocstyle-tests
  backend-docker-build:
    working_directory: ~/project/backend
    docker:
      - image: docker:24.0.9-git
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker:
          version: docker24
          docker_layer_caching: true
      - run:
          name: Docker build
          command: |
            docker build . -f platform/docker/Dockerfile
  backend-migrations:
    working_directory: ~/project/backend
    docker:
      - image: << pipeline.parameters.backend-image >>
        environment:
          SECRET_KEY: "SecretKey"
          # POSTGRESQL_PASSWORD: "password"
      - image: cimg/postgres:16.2
        environment:
          POSTGRES_DB: nutrition
          POSTGRES_USER: nutrition
    steps:
      - python-dependencies
      - gcp-credentials
      - run:
          name: Restore latest production DB
          command: ./manage.py dbrestore --noinput
      - run:
          name: Check there is no standing Django models migrations
          command: ./manage.py makemigrations --check
      - run:
          name: Check all Django model migrations can be applied
          command: ./manage.py migrate
  webapp-build-lint:
    working_directory: ~/project/webapp
    executor: webapp
    steps:
      - validate-webapp:
          env: build
  webapp-test-coverage:
    working_directory: ~/project/webapp
    executor: webapp
    steps:
      - validate-webapp:
          env: test:ci
  webapp-cpd:
    working_directory: ~/project/webapp
    executor: webapp
    steps:
      - validate-webapp:
          env: cpd

workflows:
  version: 2
  ValidationWorkflow:
    jobs:
      - backend-pytest
      - backend-flake8
      - backend-black
      - backend-mypy
      - backend-pylint
      - backend-pylint-tests
      - backend-pydocstyle
      - backend-pydocstyle-tests
      - backend-docker-build
      - backend-migrations
      - webapp-build-lint
      - webapp-test-coverage
      - webapp-cpd
