version: 2.1

parameters:
  backend-image:
    type: string
    default: "luismunozvillarreal/nutrition-backend:0.1.0_build-a19cbc2-1715436133"
  poetry-venv:
    type: string
    default: "/home/backend/project/backend/.venv/"

executors:
  python:
    docker:
      - image: << pipeline.parameters.backend-image >>
    environment:
      PATH: "/usr/local/bin:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.local/bin"
  python-postgresql:
    docker:
      - image: << pipeline.parameters.backend-image >>
      - image: cimg/postgres:16.2
        environment:
          POSTGRES_USER: nutrition

commands:
  python-dependencies:
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          name: Restore Python Dependencies
          keys:
            - python-packages-{{ checksum "poetry.lock" }}-v3
      - run:
          name: Install Python Dependencies
          command: poetry install --no-ansi
      - save_cache:
          name: Save Python Dependencies
          key: python-packages-{{ checksum "poetry.lock" }}-v3
          paths:
            - << pipeline.parameters.poetry-venv >>

  gcp-credentials:
    steps:
      - run:
          name: Create GCP credential JSON
          command: echo $GCLOUD_SERVICE_KEY > nutrition-gcp-db-backup-credentials.json

  validate:
    parameters:
      env:
        type: string
    steps:
      - restore_cache:
          name: Restore Tox Dependencies
          keys:
            - tox-<< parameters.env >>-{{ checksum "poetry.lock" }}-v1
      - run:
          name: << parameters.env >>
          command: poetry run tox -e << parameters.env >>
      - save_cache:
          name: Save Tox Dependencies
          key: tox-<< parameters.env >>-{{ checksum "poetry.lock" }}-v1
          paths:
            - .tox/<< parameters.env >>/lib

jobs:
  pytest:
    working_directory: ~/project/backend
    executor: python-postgresql
    steps:
      - python-dependencies
      - gcp-credentials
      - validate:
          env: pytest
  bandit:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - validate:
          env: bandit
  flake8:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - validate:
          env: flake8
  black:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - validate:
          env: black
  mypy:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - gcp-credentials
      - validate:
          env: mypy
  pylint:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - gcp-credentials
      - validate:
          env: pylint
  pylint-tests:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - gcp-credentials
      - validate:
          env: pylint-tests
  pydocstyle:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - validate:
          env: pydocstyle
  pydocstyle-tests:
    working_directory: ~/project/backend
    executor: python
    steps:
      - python-dependencies
      - validate:
          env: pydocstyle-tests
  docker-build:
    working_directory: ~/project/backend
    docker:
      - image: docker:24.0.9-git
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker:
          version: docker24
          docker_layer_caching: true
      - run:
          name: Docker build
          command: |
            docker build . -f platform/docker/Dockerfile
  migrations:
    working_directory: ~/project/backend
    docker:
      - image: << pipeline.parameters.backend-image >>
        environment:
          SECRET_KEY: "SecretKey"
      - image: cimg/postgres:16.2
        environment:
          POSTGRES_DB: nutrition
          POSTGRES_USER: nutrition
    steps:
      - python-dependencies
      - gcp-credentials
      - run:
          name: Restore latest production DB
          command: ./manage.py dbrestore --noinput
      - run:
          name: Check there is no standing Django models migrations
          command: ./manage.py makemigrations --check
      - run:
          name: Check all Django model migrations can be applied
          command: ./manage.py migrate


workflows:
  version: 2
  ValidationWorkflow:
    jobs:
      - pytest
      - flake8
      - black
      - mypy
      - pylint
      - pylint-tests
      - pydocstyle
      - pydocstyle-tests
      - docker-build
      - migrations
